{"data":{"site":{"siteMetadata":{"mdPlayground":{"splitPaneMainSize":"50%"},"playground":{"extraLib":"declare module 'l7plot-website'{\n          /// <reference types=\"amap-js-api\" />\r\n\r\nimport { BlendType } from '@antv/l7-core';\r\nimport { Bounds } from '@antv/l7-core';\r\nimport { CategoryLegendCustomContent } from '@antv/l7plot-component';\r\nimport { CategoryLegendListItem } from '@antv/l7plot-component';\r\nimport { CategoryLegendOptions as CategoryLegendOptions_2 } from '@antv/l7plot-component';\r\nimport { ContinueLegendCustomContent } from '@antv/l7plot-component';\r\nimport { ContinueLegendOptions as ContinueLegendOptions_2 } from '@antv/l7plot-component';\r\nimport { Control } from '@antv/l7-component';\r\nimport EventEmitter from '@antv/event-emitter';\r\nimport { GaodeMap } from '@antv/l7-maps';\r\nimport { IActiveOption } from '@antv/l7-core';\r\nimport { IAMapInstance } from '@antv/l7-maps/typings';\r\nimport { IAnimateOption } from '@antv/l7-core';\r\nimport { IColorRamp } from '@antv/l7-utils';\r\nimport { IControlOption } from '@antv/l7-core';\r\nimport { IImage } from '@antv/l7-core';\r\nimport { ILayer } from '@antv/l7-core';\r\nimport { ILayerConfig } from '@antv/l7-core';\r\nimport { ILngLat } from '@antv/l7-core';\r\nimport { IMapboxInstance } from '@antv/l7-maps/typings';\r\nimport { IScale } from '@antv/l7-core';\r\nimport { IScaleOptions } from '@antv/l7-core';\r\nimport { ISourceCFG } from '@antv/l7-core';\r\nimport { IStatusOptions } from '@antv/l7-core';\r\nimport { ITransform } from '@antv/l7-core';\r\nimport { ITransform as ITransform_2 } from '@antv/l7-core/es/services/source/ISourceService';\r\nimport { Layers } from '@antv/l7-component';\r\nimport { Mapbox } from '@antv/l7-maps';\r\nimport { Map as MapboxglMap } from 'mapbox-gl';\r\nimport { MapStyle } from '@antv/l7-core';\r\nimport { PositionName } from '@antv/l7-core';\r\nimport { PositionType } from '@antv/l7-core';\r\nimport { Scale } from '@antv/l7-component';\r\nimport { Scene } from '@antv/l7-scene';\r\nimport Source from '@antv/l7-source';\r\nimport { anchorType as TooltipAnchorType } from '@antv/l7-utils';\r\nimport { TooltipCustomContent } from '@antv/l7plot-component';\r\nimport { TooltipListItem } from '@antv/l7plot-component';\r\nimport { Zoom } from '@antv/l7-component';\r\n\r\n/** 聚合方法 */\r\nexport declare type AggregationMethod = 'count' | 'max' | 'min' | 'sum' | 'mean';\r\n\r\nexport declare type AMapInstance = AMap.Map & IAMapInstance;\r\n\r\nexport declare type AnchorType = 'right' | 'top-right' | 'left' | 'bottom-right' | 'left' | 'top-left' | 'bottom-left' | 'bottom' | 'bottom-right' | 'bottom-left' | 'top' | 'top-right' | 'top-left' | 'center';\r\n\r\n/** 图形动画 */\r\nexport declare type AnimateAttr = boolean | Partial<IAnimateOption>;\r\n\r\nexport declare class ArcLayer extends LinesLayer<ArcLayerOptions> {\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<ArcLayerOptions>;\r\n}\r\n\r\nexport declare interface ArcLayerOptions extends LinesLayerOptions {\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: ArcLineShape;\r\n}\r\n\r\n/**\r\n * 线图层 图形形状\r\n */\r\nexport declare type ArcLineShape = 'arc' | 'arc3d' | 'greatcircle';\r\n\r\nexport declare class Area extends Plot<AreaOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: Partial<AreaOptions>;\r\n    /**\r\n     * 图表类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 填充面图层\r\n     */\r\n    areaLayer: AreaLayer;\r\n    /**\r\n     * 标注图层\r\n     */\r\n    labelLayer: TextLayer | undefined;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<AreaOptions>;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: AreaOptions): void;\r\n    /**\r\n     * 初始化图层事件\r\n     */\r\n    protected initLayersEvent(): void;\r\n    /**\r\n     * 实现 legend 配置项\r\n     */\r\n    getLegendOptions(): LegendOptions;\r\n}\r\n\r\nexport declare class AreaLayer extends PlotLayer<AreaLayerOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: {\r\n        visible: boolean;\r\n        state: {\r\n            active: boolean;\r\n            select: boolean;\r\n        };\r\n        enabledMultiSelect: boolean;\r\n    };\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 填充面图层实例\r\n     */\r\n    layer: ILayer;\r\n    /**\r\n     * 描边图层\r\n     */\r\n    strokeLayer: ILayer;\r\n    /**\r\n     * 高亮描边图层\r\n     */\r\n    highlightLayer: ILayer;\r\n    /**\r\n     * 高亮描边数据\r\n     */\r\n    private highlightLayerData;\r\n    /**\r\n     * 选中填充面图层\r\n     */\r\n    selectFillLayer: ILayer;\r\n    /**\r\n     * 选中描边图层\r\n     */\r\n    selectStrokeLayer: ILayer;\r\n    /**\r\n     * 选中数据\r\n     */\r\n    private selectData;\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    constructor(options: AreaLayerOptions);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<AreaLayerOptions>;\r\n    private mappingLayer;\r\n    protected setSource(source: AreaLayerSourceOptions | Source): void;\r\n    protected setStrokeLayerSource(): void;\r\n    protected setHighlightLayerSource(feature?: any, featureId?: number): void;\r\n    protected setSelectLayerSource(selectData?: any[]): void;\r\n    private initEvent;\r\n    private onHighlighHandle;\r\n    private onUnhighlighHandle;\r\n    private onSelectHandle;\r\n    addTo(scene: Scene): void;\r\n    remove(scene: Scene): void;\r\n    update(options: Partial<AreaLayerOptions>): void;\r\n    private updateHighlightLayer;\r\n    setIndex(zIndex: number): void;\r\n    setMinZoom(minZoom: number): void;\r\n    setMaxZoom(maxZoom: number): void;\r\n    show(): void;\r\n    hide(): void;\r\n    getColorLegendItems(): {\r\n        value: [number, number];\r\n        color: string;\r\n    }[];\r\n    setActive(id: number): void;\r\n    setSelect(id: number): void;\r\n}\r\n\r\ndeclare type AreaLayerActiveOptions = {\r\n    fill?: false | string;\r\n    stroke?: false | string;\r\n    lineWidth?: number;\r\n    lineOpacity?: number;\r\n};\r\n\r\nexport declare interface AreaLayerOptions extends Omit<PolygonLayerConfig, 'style' | 'state' | 'shape' | 'size'> {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: AreaLayerSourceOptions | Source;\r\n    /**\r\n     * 图层样式\r\n     */\r\n    style?: AreaLayerStyle;\r\n    /**\r\n     * 交互反馈\r\n     */\r\n    state?: {\r\n        active?: boolean | AreaLayerActiveOptions;\r\n        select?: boolean | AreaLayerActiveOptions;\r\n    };\r\n    /**\r\n     * 是否启用多选\r\n     */\r\n    enabledMultiSelect?: boolean;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface AreaLayerSourceOptions extends Pick<ISourceCFG, 'parser' | 'transforms'> {\r\n    data: any;\r\n}\r\n\r\ndeclare type AreaLayerStyle = {\r\n    opacity?: number;\r\n    stroke?: string;\r\n    lineWidth?: number;\r\n    lineType?: 'solid' | 'dash';\r\n    lineDash?: [number, number];\r\n    lineOpacity?: number;\r\n    fillBottomColor?: false | string;\r\n};\r\n\r\n/** 区域图的配置类型定义 */\r\nexport declare interface AreaOptions extends PlotOptions, AreaLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: AreaLayerSourceOptions;\r\n}\r\n\r\n/**\r\n * 底图类型\r\n */\r\nexport declare enum BaseMapType {\r\n    Amap = \"amap\",\r\n    Mapbox = \"mapbox\"\r\n}\r\n\r\nexport { BlendType }\r\n\r\nexport { Bounds }\r\n\r\nexport declare type Callback<T> = (data: Record<string, any>) => T | T[];\r\n\r\n/**\r\n * CategoryLegend\r\n */\r\nexport declare type CategoryLegendOptions = {\r\n    title?: string;\r\n    items?: CategoryLegendListItem[];\r\n    className?: string;\r\n    customContent?: CategoryLegendCustomContent;\r\n    domStyles?: Record<string, any>;\r\n};\r\n\r\n/**\r\n * 中国国界样式\r\n */\r\ndeclare const CHINA_BOUNDARY_STYLE: {\r\n    national: {\r\n        color: string;\r\n        width: number;\r\n        opacity: number;\r\n    };\r\n    dispute: {\r\n        color: string;\r\n        width: number;\r\n        opacity: number;\r\n        dashArray: number[];\r\n    };\r\n    coast: {\r\n        color: string;\r\n        width: number;\r\n        opacity: number;\r\n    };\r\n    hkm: {\r\n        color: string;\r\n        width: number;\r\n        opacity: number;\r\n    };\r\n};\r\n\r\n/**\r\n * 中国国界样式配置\r\n */\r\ndeclare type ChinaBoundaryStyle = Partial<typeof CHINA_BOUNDARY_STYLE>;\r\n\r\nexport declare class Choropleth extends Plot<ChoroplethOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: Partial<ChoroplethOptions>;\r\n    /**\r\n     * 地理数据地址\r\n     */\r\n    static GeoDataUrl: string;\r\n    /**\r\n     * 行政数据地址\r\n     */\r\n    static GeoAreaUrl: string;\r\n    /**\r\n     * 图表类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 国界数据\r\n     */\r\n    private chinaBoundaryData;\r\n    /**\r\n     * 当前行政数据数据\r\n     */\r\n    private currentDistrictData;\r\n    /**\r\n     * 国界图层\r\n     */\r\n    chinaBoundaryLayer: PathLayer | undefined;\r\n    /**\r\n     * 国界争议图层\r\n     */\r\n    chinaDisputeBoundaryLayer: PathLayer | undefined;\r\n    /**\r\n     * 填充面图层\r\n     */\r\n    fillAreaLayer: AreaLayer;\r\n    /**\r\n     * 标注图层\r\n     */\r\n    labelLayer: TextLayer | undefined;\r\n    /**\r\n     * 数据钻取路径\r\n     */\r\n    private drillSteps;\r\n    /**\r\n     * 钻取行政栈数据\r\n     */\r\n    private drillStacks;\r\n    /**\r\n     * 初始化图层\r\n     */\r\n    protected initLayers(): void;\r\n    /**\r\n     * 渲染\r\n     */\r\n    render(): void;\r\n    /**\r\n     * 更新: 更新配置且重新渲染\r\n     */\r\n    update(options: Partial<ChoroplethOptions>): void;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<ChoroplethOptions>;\r\n    /**\r\n     * 解析 source 配置\r\n     */\r\n    protected parserSourceConfig(source: ChoroplethSourceOptions): {\r\n        data: FeatureCollection | undefined;\r\n        sourceCFG: {\r\n            transforms?: ITransform_2[] | undefined;\r\n        };\r\n    };\r\n    /**\r\n     * 创建 source 实例\r\n     */\r\n    protected createSource(): Source;\r\n    /**\r\n     * 更新: 更新数据\r\n     */\r\n    changeData(data: any[], cfg?: Partial<Omit<ChoroplethSourceOptions, 'data'>>): void;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 创建中国国界线图层\r\n     */\r\n    private createCountryBoundaryLayer;\r\n    /**\r\n     * 创建数据标签图层\r\n     */\r\n    protected createLabelLayer(source: Source, label: LabelOptions): TextLayer;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: Partial<ChoroplethOptions>): void;\r\n    /**\r\n     * 初始化图层事件\r\n     */\r\n    protected initLayersEvent(): void;\r\n    /**\r\n     * 初始化钻取事件\r\n     */\r\n    private initDrillEvent;\r\n    /**\r\n     * 重置钻取缓存数据\r\n     */\r\n    private drillReset;\r\n    /**\r\n     * 实现 legend 配置项\r\n     */\r\n    getLegendOptions(): LegendOptions;\r\n    /**\r\n     * 请求数据\r\n     */\r\n    private fetchData;\r\n    /**\r\n     * 请求初始化区域数据\r\n     */\r\n    private getInitDistrictData;\r\n    /**\r\n     * 请求区域数据\r\n     */\r\n    private getDistrictData;\r\n    /**\r\n     * 向下钻取事件回调\r\n     */\r\n    private onDrillDownHander;\r\n    /**\r\n     * 向上钻取事件回调\r\n     */\r\n    private onDrillUpHander;\r\n    /**\r\n     * 向下钻取方法\r\n     */\r\n    drillDown(view: ViewLevel, config?: DrillStepConfig): void;\r\n    /**\r\n     * 向上钻取方法\r\n     */\r\n    drillUp(config?: DrillStepConfig): void;\r\n    /**\r\n     * 更新显示区域\r\n     */\r\n    changeView(view: ViewLevel, config?: DrillStepConfig): Promise<DrillStack | undefined>;\r\n}\r\n\r\n/** 行政区域图的配置类型定义 */\r\nexport declare interface ChoroplethOptions extends PlotOptions, AreaLayerOptions {\r\n    /**\r\n     * 行政地理数据地址\r\n     */\r\n    geoArea?: string | GeoArea;\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: ChoroplethSourceOptions;\r\n    /**\r\n     * 行政级别及范围\r\n     */\r\n    viewLevel: ViewLevel;\r\n    /**\r\n     * 中国国界线\r\n     */\r\n    chinaBorder?: boolean | ChinaBoundaryStyle;\r\n    /**\r\n     * 数据钻取\r\n     */\r\n    drill?: Drill;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface ChoroplethSourceOptions extends Pick<ISourceCFG, 'transforms'> {\r\n    /**\r\n     * 业务数据\r\n     */\r\n    data: Record<string, any>[];\r\n    /**\r\n     * 地理元数据关联\r\n     */\r\n    joinBy: JoinBy;\r\n}\r\n\r\n/** 颜色 */\r\nexport declare type ColorAttr = string | Callback<string> | ColorStyleAttribute;\r\n\r\n/**\r\n * 热力普通图层 色带\r\n */\r\nexport declare type ColorRamp = {\r\n    color: string;\r\n    position: number;\r\n}[];\r\n\r\n/** 颜色色板 */\r\nexport declare type ColorsAttr = string | string[];\r\n\r\nexport declare type ColorStyleAttribute = {\r\n    field?: string | string[];\r\n    value?: string | string[] | Callback<string>;\r\n    scale?: ScaleConfig;\r\n};\r\n\r\ndeclare interface ColumnLayerOptions extends DotLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: ColumnLayerSourceOptions | Source;\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: PointShape3d;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface ColumnLayerSourceOptions extends Pick<ISourceCFG, 'parser' | 'transforms'> {\r\n    data: any;\r\n}\r\n\r\n/**\r\n * ContinueLegend\r\n */\r\nexport declare type ContinueLegendOptions = {\r\n    title?: string;\r\n    min?: number;\r\n    max?: number;\r\n    colors?: string[];\r\n    className?: string;\r\n    customContent?: ContinueLegendCustomContent;\r\n    domStyles?: Record<string, any>;\r\n};\r\n\r\nexport declare class Dot extends Plot<DotOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: Partial<DotOptions>;\r\n    /**\r\n     * 图表类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 点图层\r\n     */\r\n    dotLayer: DotLayer;\r\n    /**\r\n     * 标注图层\r\n     */\r\n    labelLayer: TextLayer | undefined;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<DotOptions>;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: DotOptions): void;\r\n    /**\r\n     * 实现 legend 配置项\r\n     */\r\n    getLegendOptions(): LegendOptions;\r\n}\r\n\r\nexport declare class DotDensity extends Plot<DotDensityOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: Partial<DotDensityOptions>;\r\n    /**\r\n     * 地图类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 点密度图层\r\n     */\r\n    dotDensityLayer: DotDensityLayer;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<DotDensityOptions>;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: DotDensityOptions): void;\r\n}\r\n\r\nexport declare class DotDensityLayer extends DotLayer<DotDensityLayerOptions> {\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<DotDensityLayerOptions>;\r\n}\r\n\r\nexport declare interface DotDensityLayerOptions extends Omit<DotLayerOptions, 'shape'> {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: DotDensityLayerSourceOptions | Source;\r\n    /**\r\n     * 图形大小\r\n     */\r\n    size?: number;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface DotDensityLayerSourceOptions extends Pick<ISourceCFG, 'parser' | 'transforms'> {\r\n    data: any;\r\n}\r\n\r\n/** 点密度图的配置类型定义 */\r\nexport declare interface DotDensityOptions extends PlotOptions, DotDensityLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: DotDensityLayerSourceOptions;\r\n}\r\n\r\nexport declare class DotLayer<O extends DotLayerOptions = DotLayerOptions> extends PlotLayer<O> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: {\r\n        source: {\r\n            data: never[];\r\n            parser: {\r\n                type: string;\r\n                x: string;\r\n                y: string;\r\n            };\r\n        };\r\n        shape: string;\r\n        size: number;\r\n        color: string;\r\n    };\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 图层实例\r\n     */\r\n    layer: ILayer;\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    constructor(options: O);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<O>;\r\n    protected mappingLayer(layer: ILayer, options: O): void;\r\n    update(options: Partial<O>): void;\r\n    getColorLegendItems(): {\r\n        value: [number, number];\r\n        color: string;\r\n    }[];\r\n}\r\n\r\nexport declare interface DotLayerOptions extends PointLayerConfig {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: SourceOptions | Source;\r\n}\r\n\r\n/** 散点图的配置类型定义 */\r\nexport declare interface DotOptions extends PlotOptions, DotLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: SourceOptions;\r\n}\r\n\r\n/**\r\n * 数据钻取\r\n * 下钻上卷\r\n */\r\ndeclare type Drill = {\r\n    /**\r\n     * 是否启用下钻\r\n     */\r\n    enabled?: boolean;\r\n    /**\r\n     * 钻取维度顺序\r\n     */\r\n    steps: DrillStep[] | DrillStep['level'][];\r\n    /**\r\n     * 上卷钻取的触发事件\r\n     */\r\n    triggerUp?: 'unclick' | 'undblclick' | 'uncontextmenu';\r\n    /**\r\n     * 下钻钻取的触发事件\r\n     */\r\n    triggerDown?: 'click' | 'dblclick' | 'contextmenu';\r\n    /**\r\n     * 上卷事件回调\r\n     */\r\n    onUp?: (from: ViewLevel, to: ViewLevel, callback: (config?: DrillStepConfig) => void) => void;\r\n    /**\r\n     * 下钻事件回调\r\n     */\r\n    onDown?: (from: ViewLevel, to: ViewLevel & {\r\n        properties: Record<string, any>;\r\n    }, callback: (config?: DrillStepConfig) => void) => void;\r\n};\r\n\r\n/**\r\n * 行政层级数据\r\n */\r\ndeclare type DrillStack = Required<ViewLevel> & {\r\n    config: DrillStepConfig;\r\n};\r\n\r\n/**\r\n * 钻取维度\r\n */\r\ndeclare type DrillStep = DrillStepConfig & {\r\n    /**\r\n     * 行政级别\r\n     */\r\n    level: 'country' | 'province' | 'city' | 'district';\r\n    /**\r\n     * 化行政级别下的粒度\r\n     */\r\n    granularity?: 'province' | 'city' | 'district';\r\n};\r\n\r\n/**\r\n * 钻取维度配置项\r\n */\r\ndeclare type DrillStepConfig = Partial<Pick<AreaLayerOptions, 'color' | 'style' | 'state'>> & Pick<PlotOptions, 'label' | 'tooltip'> & {\r\n    source?: Partial<ChoroplethSourceOptions>;\r\n};\r\n\r\ndeclare interface Event_2 {\r\n    type: string;\r\n    target?: any;\r\n    [key: string]: any;\r\n}\r\nexport { Event_2 as Event }\r\n\r\n/**\r\n * GeoJson FeatureCollection 数据格式\r\n */\r\ndeclare type FeatureCollection = GeoJSON.FeatureCollection;\r\n\r\n/** 数据过滤 */\r\nexport declare type FilterAttr = {\r\n    field?: string | string[];\r\n    value: Callback<boolean>;\r\n};\r\n\r\nexport declare class Flow extends Plot<FlowOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: Partial<FlowOptions>;\r\n    /**\r\n     * 图表类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 流向图层\r\n     */\r\n    flowLayer: ArcLayer;\r\n    /**\r\n     * 辐射圈图层\r\n     */\r\n    radiationLayer: DotLayer | undefined;\r\n    /**\r\n     * 落地点标注图层\r\n     */\r\n    labelLayer: TextLayer | undefined;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<FlowOptions>;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 解析流向图起终点数据\r\n     */\r\n    private parserPointData;\r\n    /**\r\n     * 创建辐射圈图层\r\n     */\r\n    protected createRadiationLayer(source: Source): DotLayer;\r\n    /**\r\n     * 创建数据标签图层\r\n     */\r\n    protected createLabelLayer(source: Source, label: LabelOptions): TextLayer;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: FlowOptions): void;\r\n    /**\r\n     * 实现 legend 配置项\r\n     */\r\n    getLegendOptions(): LegendOptions;\r\n}\r\n\r\n/** 流向图的配置类型定义 */\r\nexport declare interface FlowOptions extends PlotOptions, ArcLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: SourceOptions;\r\n    /**\r\n     * 辐射圈配置\r\n     */\r\n    radiation?: FlowRadiation;\r\n}\r\n\r\n/**\r\n * 辐射圈配置\r\n */\r\ndeclare type FlowRadiation = {\r\n    /**\r\n     * 是否开启辐射圈\r\n     */\r\n    enabled?: boolean;\r\n    /**\r\n     * 颜色\r\n     */\r\n    color?: string;\r\n    /**\r\n     * 图形大小\r\n     */\r\n    size?: SizeAttr;\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: PointShape2d;\r\n    /**\r\n     * 是否启用辐射圈动画\r\n     */\r\n    animate?: boolean;\r\n};\r\n\r\n/**\r\n * 行政地理数据地址\r\n */\r\ndeclare type GeoArea = {\r\n    url?: string;\r\n    type: 'geojson' | 'topojson';\r\n};\r\n\r\n/**\r\n * 获取主题配置信息。\r\n */\r\nexport declare function getTheme(theme?: string): Record<string, any>;\r\n\r\nexport declare class Grid extends Plot<GridOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: Partial<GridOptions>;\r\n    /**\r\n     * 地图类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 网格图层\r\n     */\r\n    gridLayer: GridLayer;\r\n    /**\r\n     * 标注图层\r\n     */\r\n    labelLayer: TextLayer | undefined;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<GridOptions>;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: GridOptions): void;\r\n}\r\n\r\n/** 网格聚合 */\r\nexport declare type GridAggregation = {\r\n    /**\r\n     * 聚合类型\r\n     */\r\n    type?: 'grid' | 'hexagon';\r\n    /**\r\n     * 聚合字段\r\n     */\r\n    field: string;\r\n    /**\r\n     * 网格半径\r\n     */\r\n    radius?: number;\r\n    /**\r\n     * 聚合方法\r\n     */\r\n    method?: AggregationMethod;\r\n};\r\n\r\n/**\r\n * 热力网格图/蜂窝图层 图层样式\r\n */\r\nexport declare type GridHeatmapLayerStyleOptions = {\r\n    opacity?: number;\r\n    angle?: number;\r\n    coverage?: number;\r\n};\r\n\r\nexport declare class GridLayer extends PlotLayer<GridLayerOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: GridLayerOptions;\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 图层实例\r\n     */\r\n    layer: ILayer;\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    constructor(options: GridLayerOptions);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<GridLayerOptions>;\r\n    protected mappingLayer(layer: ILayer, options: GridLayerOptions): void;\r\n    update(options: Partial<GridLayerOptions>): void;\r\n}\r\n\r\nexport declare interface GridLayerOptions extends HeatmapLayerConfig {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: GridLayerSourceOptions | Source;\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: HeatmapShape2d | HeatmapShape3d;\r\n    /**\r\n     * 图层样式\r\n     */\r\n    style?: GridHeatmapLayerStyleOptions;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface GridLayerSourceOptions extends Pick<ISourceCFG, 'parser' | 'transforms'> {\r\n    data: any;\r\n    /**\r\n     * 方格网格聚合\r\n     */\r\n    aggregation: GridAggregation;\r\n}\r\n\r\n/** 网格聚合图的配置类型定义 */\r\nexport declare interface GridOptions extends PlotOptions, GridLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: GridLayerSourceOptions;\r\n}\r\n\r\nexport declare class Heatmap extends Plot<HeatmapOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: Partial<HeatmapOptions>;\r\n    /**\r\n     * 地图类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 热力图层\r\n     */\r\n    heatmapLayer: HeatmapLayer;\r\n    /**\r\n     * 标注图层\r\n     */\r\n    labelLayer: TextLayer | undefined;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<HeatmapOptions>;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: HeatmapOptions): void;\r\n    /**\r\n     * 实现 legend 配置项\r\n     */\r\n    getLegendOptions(): LegendOptions;\r\n}\r\n\r\nexport declare class HeatmapLayer extends PlotLayer<HeatmapLayerOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: HeatmapLayerOptions;\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 图层实例\r\n     */\r\n    layer: ILayer;\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    constructor(options: HeatmapLayerOptions);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<HeatmapLayerOptions>;\r\n    protected mappingLayer(layer: ILayer, options: HeatmapLayerOptions): void;\r\n    update(options: Partial<HeatmapLayerOptions>): void;\r\n}\r\n\r\n/**\r\n * 热力图层基础配置\r\n */\r\nexport declare interface HeatmapLayerConfig extends Partial<PlotLayerOptions> {\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: HeatmapShape;\r\n    /**\r\n     * 图形颜色\r\n     */\r\n    color?: ColorAttr;\r\n    /**\r\n     * 图形大小\r\n     */\r\n    size?: SizeAttr;\r\n    /**\r\n     * 图层样式\r\n     */\r\n    style?: HeatmapLayerStyleOptions | GridHeatmapLayerStyleOptions;\r\n    /**\r\n     * 交互反馈\r\n     */\r\n    state?: StateAttribute;\r\n}\r\n\r\nexport declare interface HeatmapLayerOptions extends Omit<HeatmapLayerConfig, 'color'> {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: HeatmapLayerSourceOptions | Source;\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: 'heatmap' | 'heatmap3D';\r\n    /**\r\n     * 图层样式\r\n     */\r\n    style?: HeatmapLayerStyleOptions;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface HeatmapLayerSourceOptions extends Pick<ISourceCFG, 'parser' | 'transforms'> {\r\n    data: any;\r\n}\r\n\r\n/**\r\n * 热力普通图层 图层样式\r\n */\r\nexport declare type HeatmapLayerStyleOptions = {\r\n    opacity?: number;\r\n    angle?: number;\r\n    intensity: number;\r\n    radius: number;\r\n    colorsRamp: ColorRamp;\r\n    rampColors?: IColorRamp;\r\n};\r\n\r\n/** 热力图的配置类型定义 */\r\nexport declare interface HeatmapOptions extends PlotOptions, HeatmapLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: HeatmapLayerSourceOptions;\r\n}\r\n\r\nexport declare type HeatmapShape = 'heatmap' | 'heatmap3D' | HeatmapShape2d | HeatmapShape3d;\r\n\r\n/**\r\n * 热力图层 图形形状\r\n */\r\nexport declare type HeatmapShape2d = 'circle' | 'square' | 'hexagon' | 'triangle';\r\n\r\nexport declare type HeatmapShape3d = 'cylinder' | 'squareColumn' | 'hexagonColumn' | 'triangleColumn';\r\n\r\nexport declare class Hexbin extends Plot<HexbinOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: any;\r\n    /**\r\n     * 地图类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 蜂窝图层\r\n     */\r\n    hexbinLayer: HexbinLayer;\r\n    /**\r\n     * 标注图层\r\n     */\r\n    labelLayer: TextLayer | undefined;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<HexbinOptions>;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: HexbinOptions): void;\r\n}\r\n\r\nexport declare class HexbinLayer extends PlotLayer<HexbinLayerOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: HexbinLayerOptions;\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 图层实例\r\n     */\r\n    layer: ILayer;\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    constructor(options: HexbinLayerOptions);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<HexbinLayerOptions>;\r\n    protected mappingLayer(layer: ILayer, options: HexbinLayerOptions): void;\r\n    update(options: Partial<HexbinLayerOptions>): void;\r\n}\r\n\r\nexport declare interface HexbinLayerOptions extends HeatmapLayerConfig {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: HexbinLayerSourceOptions | Source;\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: 'hexagon' | 'hexagonColumn';\r\n    /**\r\n     * 图层样式\r\n     */\r\n    style?: GridHeatmapLayerStyleOptions;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface HexbinLayerSourceOptions extends Pick<ISourceCFG, 'parser' | 'transforms'> {\r\n    data: any;\r\n    /**\r\n     * 六边形网格聚合\r\n     */\r\n    aggregation: GridAggregation;\r\n}\r\n\r\n/** 蜂窝聚合图的配置类型定义 */\r\nexport declare interface HexbinOptions extends PlotOptions, HexbinLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: HexbinLayerSourceOptions;\r\n}\r\n\r\nexport declare class IconLayer extends DotLayer<IconLayerOptions> {\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<IconLayerOptions>;\r\n}\r\n\r\nexport declare interface IconLayerOptions extends DotLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: SourceOptions | Source;\r\n    /**\r\n     * 图标形状\r\n     */\r\n    shape: ShapeAttr<string>;\r\n}\r\n\r\nexport { IImage }\r\n\r\nexport { ILayer }\r\n\r\nexport { ILayerConfig }\r\n\r\nexport { ILngLat }\r\n\r\n/**\r\n * L7Plot 内置图层的基类接口\r\n */\r\nexport declare interface IPlotLayer {\r\n    name: string;\r\n    type: string;\r\n    layer: ILayer;\r\n    interaction: boolean;\r\n    options: PlotLayerOptions;\r\n    pickLayerConfig<T extends PlotLayerOptions>(params: T): Partial<ILayerConfig>;\r\n    addTo(scene: Scene): void;\r\n    remove(scene: Scene): void;\r\n    update<T>(options: T): void;\r\n    updateOption<T>(options: T): void;\r\n    changeData(source: SourceOptions | Source): void;\r\n    render(): void;\r\n    show(): void;\r\n    hide(): void;\r\n    toggleVisible(): void;\r\n    fitBounds(fitBoundsOptions?: unknown): void;\r\n    on(name: string, callback: (...args: any[]) => void): this;\r\n    once(name: string, callback: (...args: any[]) => void): this;\r\n    off(name: string, callback: (...args: any[]) => void): this;\r\n}\r\n\r\nexport { ISourceCFG }\r\n\r\nexport { ITransform }\r\n\r\n/**\r\n * 地理元数据关联\r\n */\r\ndeclare type JoinBy = {\r\n    /**\r\n     * 业务元数据地理字段\r\n     */\r\n    sourceField: string;\r\n    /**\r\n     * 地理数据字段\r\n     */\r\n    geoField?: string;\r\n    /**\r\n     * 地理数据\r\n     */\r\n    geoData?: FeatureCollection;\r\n};\r\n\r\nexport declare class L7Plot extends Map_2<L7PlotOptions> {\r\n    /**\r\n     * 默认的 options 配置项\r\n     */\r\n    static DefaultOptions: Partial<L7PlotOptions>;\r\n    /**\r\n     * 图表实例\r\n     */\r\n    plots: Plot<PlotConfigType>[];\r\n    constructor(container: string | HTMLDivElement, options: L7PlotOptions);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<L7PlotOptions>;\r\n    /**\r\n     * 创建所有图层\r\n     */\r\n    protected createLayers(): LayerGroup;\r\n    /**\r\n     * 创建图层实例\r\n     */\r\n    private createLayer;\r\n    /**\r\n     * 添加图层\r\n     */\r\n    addLayer(layer: LayerConfigType | IPlotLayer): void;\r\n    /**\r\n     * 移除图层\r\n     */\r\n    removeLayerByName(name: string): boolean;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(layers: LayerConfigType[]): void;\r\n    /**\r\n     * 更新 Plot\r\n     */\r\n    protected updatePlots(plots: PlotConfigType[]): void;\r\n    /**\r\n     * 渲染\r\n     */\r\n    render(): void;\r\n    /**\r\n     * 图层加载成功\r\n     */\r\n    private onLayersLoaded;\r\n    /**\r\n     * 渲染 plots\r\n     */\r\n    private renderPlots;\r\n    /**\r\n     * 创建 plot\r\n     */\r\n    private createPlot;\r\n    /**\r\n     * 添加图表\r\n     */\r\n    addPlot(plotConfig: PlotConfigType): void;\r\n    /**\r\n     * 获取所有图表\r\n     */\r\n    getPlots(): Plot<PlotConfigType>[];\r\n    /**\r\n     * 根据图表名称获取图表\r\n     */\r\n    getPlotByName(name: string): Plot<PlotConfigType> | undefined;\r\n    /**\r\n     * 根据图表名称移除图表\r\n     */\r\n    removePlotByName(name: string): boolean;\r\n    /**\r\n     * 移除所有的图表\r\n     */\r\n    removeAllPlot(): void;\r\n}\r\n\r\n/**\r\n * 高级 plot options 配置\r\n */\r\nexport declare interface L7PlotOptions extends MapOptions {\r\n    /**\r\n     * 支持使用已有的 plot\r\n     */\r\n    plots?: PlotConfigType[];\r\n    /**\r\n     * L7Plot 内置的的图层\r\n     */\r\n    layers?: LayerConfigType[];\r\n}\r\n\r\n/**\r\n * Label\r\n */\r\nexport declare interface LabelOptions extends PlotLayerOptions {\r\n    /** 映射的字段 */\r\n    field?: string;\r\n    /** 回调函数 */\r\n    content?: string;\r\n    /** 字体样式 */\r\n    style?: PointTextLayerStyleOptions;\r\n    state?: StateAttribute;\r\n}\r\n\r\n/**\r\n * 图层混合配置\r\n */\r\nexport declare type LayerBlend = keyof typeof BlendType;\r\n\r\n/**\r\n * L7Plot 内置的 layers 类型\r\n */\r\ndeclare type LayerConfigType = {\r\n    id?: string;\r\n} & (({\r\n    type: 'textLayer';\r\n} & TextLayerOptions) | ({\r\n    type: 'dotLayer';\r\n} & DotLayerOptions) | ({\r\n    type: 'iconLayer';\r\n} & IconLayerOptions) | ({\r\n    type: 'dotDensity';\r\n} & DotDensityLayerOptions) | ({\r\n    type: 'columnLayer';\r\n} & ColumnLayerOptions) | ({\r\n    type: 'heatmapLayer';\r\n} & HeatmapLayerOptions) | ({\r\n    type: 'gridLayer';\r\n} & GridLayerOptions) | ({\r\n    type: 'hexbinLayer';\r\n} & HexbinLayerOptions) | ({\r\n    type: 'pathLayer';\r\n} & PathLayerOptions) | ({\r\n    type: 'arcLayer';\r\n} & ArcLayerOptions) | ({\r\n    type: 'areaLayer';\r\n} & AreaLayerOptions) | ({\r\n    type: 'prismLayer';\r\n} & PrismLayerOptions));\r\n\r\ndeclare class LayerGroup extends EventEmitter {\r\n    /**\r\n     * 图层组名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 子图层\r\n     */\r\n    layers: IPlotLayer[];\r\n    /**\r\n     * 地图容器\r\n     */\r\n    scene: Scene | undefined;\r\n    constructor(layers?: IPlotLayer[], option?: LayerGroupOption);\r\n    /**\r\n     * 图层组添加到地图上\r\n     */\r\n    addTo(scene: Scene): void;\r\n    /**\r\n     * 图层组是否有该图层\r\n     */\r\n    hasLayer(layer: IPlotLayer): boolean;\r\n    /**\r\n     * 增加图层\r\n     */\r\n    addLayer(layer: IPlotLayer): void;\r\n    /**\r\n     * 移除 layer 图层\r\n     */\r\n    removeLayer(layer: IPlotLayer): boolean;\r\n    /**\r\n     * 获取所有的地图图层\r\n     */\r\n    getLayers(): IPlotLayer[];\r\n    /**\r\n     * 获取所有的带交互图层\r\n     */\r\n    getInteractionLayers(): IPlotLayer[];\r\n    /**\r\n     * 根据图层 ID 获取图层对象\r\n     */\r\n    getLayer(id: string): IPlotLayer | undefined;\r\n    /**\r\n     * 根据图层 name 获取图层对象\r\n     */\r\n    getLayerByName(name: string): IPlotLayer | undefined;\r\n    /**\r\n     * 移除所有的图层对象\r\n     */\r\n    removeAllLayer(): void;\r\n    /**\r\n     * 是否图层组为空\r\n     */\r\n    isEmpty(): boolean;\r\n}\r\n\r\ndeclare interface LayerGroupOption {\r\n    name?: string;\r\n}\r\n\r\n/**\r\n * LayerMenuControl\r\n */\r\nexport declare type LayerMenuControlOptions = {\r\n    position?: PositionName;\r\n    collapsed?: boolean;\r\n    autoZIndex?: boolean;\r\n    hideSingleBase?: boolean;\r\n    sortLayers?: boolean;\r\n    sortFunction?: (...args: any[]) => any;\r\n};\r\n\r\n/**\r\n * L7Plot 内置图层类型\r\n */\r\nexport declare enum LayerType {\r\n    TextLayer = \"textLayer\",\r\n    DotLayer = \"dotLayer\",\r\n    IconLayer = \"iconLayer\",\r\n    DotDensity = \"dotDensityLayer\",\r\n    ColumnLayer = \"columnLayer\",\r\n    HeatmapLayer = \"heatmapLayer\",\r\n    GridLayer = \"gridLayer\",\r\n    HexbinLayer = \"hexbinLayer\",\r\n    LinesLayer = \"linesLayer\",\r\n    PathLayer = \"pathLayer\",\r\n    ArcLayer = \"arcLayer\",\r\n    AreaLayer = \"areaLayer\",\r\n    PrismLayer = \"prismLayer\"\r\n}\r\n\r\ndeclare class Legend extends Control {\r\n    /**\r\n     * legend 的 schema 配置\r\n     */\r\n    protected options: LegendOptions_2;\r\n    /**\r\n     * legendComponents 实例\r\n     */\r\n    private legendComponents;\r\n    constructor(options: LegendOptions_2);\r\n    private initLegendComponents;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<LegendOptions_2>;\r\n    onAdd(): HTMLElement;\r\n    onRemove(): void;\r\n}\r\n\r\ndeclare type LegendItem = {\r\n    type: LegendType;\r\n    options: CategoryLegendOptions_2 & ContinueLegendOptions_2;\r\n};\r\n\r\n/**\r\n * LegendControl\r\n */\r\nexport declare interface LegendOptions extends Omit<CategoryLegendOptions, 'customContent'>, Omit<ContinueLegendOptions, 'customContent'> {\r\n    type?: LegendType;\r\n    position?: PositionName;\r\n    customContent?: CategoryLegendCustomContent | ContinueLegendCustomContent;\r\n}\r\n\r\ndeclare interface LegendOptions_2 extends Partial<IControlOption> {\r\n    items: LegendItem[];\r\n}\r\n\r\ndeclare type LegendType = 'category' | 'continue';\r\n\r\nexport declare type LineShape = 'line' | ArcLineShape;\r\n\r\ndeclare class LinesLayer<O extends LinesLayerOptions = LinesLayerOptions> extends PlotLayer<O> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: {};\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 图层实例\r\n     */\r\n    layer: ILayer;\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    constructor(options: O);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<O>;\r\n    protected mappingLayer(layer: ILayer, options: O): void;\r\n    update(options: Partial<O>): void;\r\n    getColorLegendItems(): {\r\n        value: [number, number];\r\n        color: string;\r\n    }[];\r\n}\r\n\r\n/**\r\n * 线图层基础配置\r\n */\r\nexport declare interface LinesLayerConfig extends Partial<PlotLayerOptions> {\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: ShapeAttr<LineShape>;\r\n    /**\r\n     * 图形颜色\r\n     */\r\n    color?: ColorAttr;\r\n    /**\r\n     * 图形大小\r\n     */\r\n    size?: SizeAttr;\r\n    /**\r\n     * 图层样式\r\n     */\r\n    style?: LinesLayerStyleOptions;\r\n    /**\r\n     * animation 配置\r\n     */\r\n    animate?: AnimateAttr;\r\n    /**\r\n     * 交互反馈\r\n     */\r\n    state?: StateAttribute;\r\n    /**\r\n     * 纹理贴图\r\n     */\r\n    texture?: TextureAttr;\r\n}\r\n\r\ndeclare interface LinesLayerOptions extends LinesLayerConfig {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: LinesLayerSourceOptions | Source;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface LinesLayerSourceOptions extends Pick<ISourceCFG, 'parser' | 'transforms'> {\r\n    data: any;\r\n}\r\n\r\n/**\r\n * 线图层 图层样式\r\n */\r\nexport declare type LinesLayerStyleOptions = {\r\n    opacity?: number | [string, (data: any) => number] | [string, [number, number]];\r\n    lineType?: keyof typeof LineStyleType;\r\n    dashArray?: [number, number];\r\n    segmentNumber?: number;\r\n    sourceColor?: string;\r\n    targetColor?: string;\r\n    forward?: boolean;\r\n    thetaOffset?: number;\r\n    lineTexture?: boolean;\r\n    iconStep?: number;\r\n    textureBlend?: string;\r\n};\r\n\r\n/**\r\n * 线图层 线类型\r\n */\r\nexport declare enum LineStyleType {\r\n    'solid' = 0,\r\n    'dash' = 1\r\n}\r\n\r\n/**\r\n * logo 配置\r\n */\r\nexport declare type Logo = {\r\n    position?: PositionName;\r\n    visible?: boolean;\r\n};\r\n\r\ndeclare abstract class Map_2<O extends MapOptions> extends EventEmitter {\r\n    /**\r\n     * 默认的 options 配置项\r\n     */\r\n    static DefaultOptions: Partial<MapOptions>;\r\n    /**\r\n     * 是否初始化成功\r\n     */\r\n    inited: boolean;\r\n    /**\r\n     * 是否场景加载完成\r\n     */\r\n    sceneLoaded: boolean;\r\n    /**\r\n     * 是否所有图层加载完成\r\n     */\r\n    layersLoaded: boolean;\r\n    /**\r\n     * 是否场景与所有图层加载完成\r\n     */\r\n    loaded: boolean;\r\n    /**\r\n     * map 的 schema 配置\r\n     */\r\n    options: O;\r\n    /**\r\n     * map 上一次的 schema 配置\r\n     */\r\n    protected lastOptions: O;\r\n    /**\r\n     * map 绘制的 dom\r\n     */\r\n    container: HTMLDivElement;\r\n    /**\r\n     * scene 实例\r\n     */\r\n    scene: Scene;\r\n    /**\r\n     * 图层组\r\n     */\r\n    layerGroup: LayerGroup;\r\n    /**\r\n     * 主题配置\r\n     */\r\n    protected theme: Record<string, any>;\r\n    /**\r\n     * zoom 放缩器 Control\r\n     */\r\n    zoomControl: Zoom | undefined;\r\n    /**\r\n     * scale 比例尺 Control\r\n     */\r\n    scaleControl: Scale | undefined;\r\n    /**\r\n     * layerMenu 图层列表 Control\r\n     */\r\n    layerMenuControl: Layers | undefined;\r\n    /**\r\n     * legend 图例 Control\r\n     */\r\n    legendControl: Legend | undefined;\r\n    /**\r\n     * tooltip 悬浮提示\r\n     */\r\n    tooltip: Tooltip | undefined;\r\n    constructor(options: O);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<MapOptions>;\r\n    /**\r\n     * 创建 DOM 容器\r\n     */\r\n    protected createContainer(container: string | HTMLDivElement): HTMLDivElement;\r\n    /**\r\n     * 注册主题\r\n     */\r\n    protected createTheme(): any;\r\n    /**\r\n     * 创建 map 容器\r\n     */\r\n    protected createMap(): GaodeMap | Mapbox;\r\n    /**\r\n     * 创建 scene 实例\r\n     */\r\n    protected createScene(): Scene;\r\n    /**\r\n     * 渲染\r\n     */\r\n    abstract render(): void;\r\n    /**\r\n     * 注册静态资源\r\n     */\r\n    protected registerResources(): void;\r\n    /**\r\n     * 更新: 更新配置且重新渲染\r\n     */\r\n    update(options: Partial<O>): void;\r\n    /**\r\n     * 更新: 更新配置\r\n     */\r\n    updateOption(options: Partial<O>): void;\r\n    /**\r\n     * 更新: 地图底图配置\r\n     */\r\n    updateMap(updateMapConfig: UpdateMapConfig): void;\r\n    /**\r\n     * 修改容器大小\r\n     */\r\n    changeSize(width: number, height: number): void;\r\n    /**\r\n     * 事件代理: 绑定事件\r\n     */\r\n    on(name: string, callback: (...args: any[]) => void): this;\r\n    /**\r\n     * 事件代理: 绑定一次事件\r\n     */\r\n    once(name: string, callback: (...args: any[]) => void): this;\r\n    /**\r\n     * 事件代理: 解绑事件\r\n     */\r\n    off(name: string, callback: (...args: any[]) => void): this;\r\n    /**\r\n     * 事件代理: 事件处理\r\n     */\r\n    private proxyEventHander;\r\n    /**\r\n     * 获取 scene 实例\r\n     */\r\n    getScene(): Scene;\r\n    /**\r\n     * 获取 map 实例\r\n     */\r\n    getMap(): MapboxInstance | AMapInstance | unknown;\r\n    /**\r\n     * 添加图层\r\n     */\r\n    addLayer(layer: IPlotLayer): void;\r\n    /**\r\n     * 获取所有图层\r\n     *  @deprecate\r\n     */\r\n    getLayes(): IPlotLayer[];\r\n    /**\r\n     * 获取所有图层\r\n     */\r\n    getLayers(): IPlotLayer[];\r\n    /**\r\n     * 根据图层名称获取图层\r\n     */\r\n    getLayerByName(name: string): IPlotLayer | undefined;\r\n    /**\r\n     * 移除图层\r\n     */\r\n    removeLayer(layer: IPlotLayer): boolean;\r\n    /**\r\n     * 移除内置所有的图层\r\n     */\r\n    removeAllLayer(): void;\r\n    /**\r\n     * 地图放大一级\r\n     */\r\n    zoomIn(): void;\r\n    /**\r\n     * 地图缩小一级\r\n     */\r\n    zoomOut(): void;\r\n    /**\r\n     * 设置地图倾角\r\n     */\r\n    setPitch(pitch: number): void;\r\n    /**\r\n     * 设置地图缩放范围\r\n     */\r\n    fitBounds(bound: Bounds): void;\r\n    /**\r\n     * 设置地图状态\r\n     * 可用来关闭地图的一些交互操作\r\n     */\r\n    setMapStatus(status: MapStatusOptions): void;\r\n    /**\r\n     * 设置场景的背景色\r\n     */\r\n    setBgColor(color: string): void;\r\n    /**\r\n     * 初始化组件\r\n     */\r\n    protected initComponents(): void;\r\n    /**\r\n     * 更新化组件\r\n     */\r\n    protected updateComponents(): void;\r\n    /**\r\n     * 初始化控件\r\n     */\r\n    protected initControls(): void;\r\n    /**\r\n     * 更新控件\r\n     */\r\n    protected updateControls(): void;\r\n    /**\r\n     * 添加 zoom 控件\r\n     */\r\n    addZoomControl(options: ZoomControlOptions): void;\r\n    /**\r\n     * 更新 zoom 控件\r\n     */\r\n    updateZoomControl(options: ZoomControlOptions): void;\r\n    /**\r\n     * 移除 zoom 控件\r\n     */\r\n    removeZoomControl(): void;\r\n    /**\r\n     * 添加 scale 控件\r\n     */\r\n    addScaleControl(options: ScaleControlOptions): void;\r\n    /**\r\n     * 更新 scale 控件\r\n     */\r\n    updateScaleControl(options: ScaleControlOptions): void;\r\n    /**\r\n     * 移除 scale 控件\r\n     */\r\n    removeScaleControl(): void;\r\n    /**\r\n     * 添加 layerMenu 控件\r\n     */\r\n    addLayerMenuControl(options: LayerMenuControlOptions): void;\r\n    /**\r\n     * 更新 layerMenu 控件\r\n     */\r\n    updateLayerMenuControl(options: LayerMenuControlOptions): void;\r\n    /**\r\n     * 移除 layerMenu 控件\r\n     */\r\n    removeLayerMenuControl(): void;\r\n    /**\r\n     * 获取 legend 配置项\r\n     * 由各图各自实现，不同的图 legend 可能不同\r\n     */\r\n    getLegendOptions(): LegendOptions;\r\n    /**\r\n     * 添加 legend 控件\r\n     */\r\n    addLegendControl(options: LegendOptions): void;\r\n    /**\r\n     * 更新 legend 控件\r\n     */\r\n    updateLegendControl(options: LegendOptions): void;\r\n    /**\r\n     * 移除 legend 控件\r\n     */\r\n    removeLegendControl(): void;\r\n    /**\r\n     * 初始化 tooltip\r\n     */\r\n    protected initTooltip(): void;\r\n    /**\r\n     * 导出地图图片\r\n     */\r\n    exportPng(type?: 'png' | 'jpg'): string;\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy(): void;\r\n}\r\nexport { Map_2 as Map }\r\n\r\nexport { MapboxglMap }\r\n\r\nexport declare type MapboxInstance = MapboxglMap & IMapboxInstance;\r\n\r\n/**\r\n * 地图配置\r\n */\r\nexport declare type MapConfig = {\r\n    /**\r\n     * 底图类型\r\n     */\r\n    type?: 'amap' | 'mapbox';\r\n    /**\r\n     * 地图\r\n     */\r\n    token?: string;\r\n    /**\r\n     * 中心点\r\n     */\r\n    center?: [number, number];\r\n    /**\r\n     * 地图倾角\r\n     */\r\n    pitch?: number;\r\n    /**\r\n     * 地图旋转角度\r\n     */\r\n    rotation?: number;\r\n    /**\r\n     * 缩放等级\r\n     */\r\n    zoom?: number;\r\n    /**\r\n     * 底图样式\r\n     */\r\n    style?: MapStyle;\r\n    /**\r\n     * 最小缩放等级\r\n     */\r\n    minZoom?: number;\r\n    /**\r\n     * 最大缩放等级\r\n     */\r\n    maxZoom?: number;\r\n    [key: string]: any;\r\n};\r\n\r\nexport declare type MapInstance = AMapInstance | MapboxInstance;\r\n\r\n/**\r\n * 基础 map options 配置\r\n */\r\nexport declare interface MapOptions {\r\n    /**\r\n     * 容器宽度\r\n     */\r\n    readonly width?: number;\r\n    /**\r\n     * 容器高度\r\n     */\r\n    readonly height?: number;\r\n    /**\r\n     * 地图配置\r\n     */\r\n    readonly map?: MapConfig;\r\n    /**\r\n     * 是否开启抗锯齿\r\n     */\r\n    readonly antialias?: boolean;\r\n    /**\r\n     * 是否保留缓冲区数据\r\n     */\r\n    readonly preserveDrawingBuffer?: boolean;\r\n    /**\r\n     * logo 配置\r\n     */\r\n    readonly logo?: boolean | Logo;\r\n    /**\r\n     * 主题，string 或 object\r\n     */\r\n    readonly theme?: string | Record<string, any>;\r\n    /**\r\n     * tooltip 配置项\r\n     */\r\n    readonly tooltip?: false | TooltipOptions;\r\n    /**\r\n     * popup 配置项\r\n     */\r\n    /**\r\n     * 图例 legend 配置项\r\n     */\r\n    readonly legend?: false | LegendOptions;\r\n    /**\r\n     * zoom 配置\r\n     */\r\n    readonly zoom?: false | ZoomControlOptions;\r\n    /**\r\n     * scale 配置\r\n     */\r\n    readonly scale?: false | ScaleControlOptions;\r\n    /**\r\n     * layerMenu 配置\r\n     */\r\n    readonly layerMenu?: false | LayerMenuControlOptions;\r\n}\r\n\r\nexport declare type MapStatusOptions = IStatusOptions;\r\n\r\ndeclare interface MouseEvent_2 extends Event_2 {\r\n    x: number;\r\n    y: number;\r\n    type: string;\r\n    lngLat: ILngLat;\r\n    feature: any;\r\n    featureId: number;\r\n}\r\nexport { MouseEvent_2 as MouseEvent }\r\n\r\n/**\r\n * 移除 Plot options 中不需要的配置\r\n */\r\ndeclare type OmitPlotOptions<T> = Omit<T, 'map' | 'width' | 'height' | 'antialias' | 'preserveDrawingBuffer' | 'logo' | 'theme' | 'zoom' | 'scale'>;\r\n\r\nexport declare class Path extends Plot<PathOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: Partial<PathOptions>;\r\n    /**\r\n     * 图表类型\r\n     */\r\n    type: PlotType;\r\n    /**\r\n     * 路径图层\r\n     */\r\n    pathLayer: PathLayer;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<PathOptions>;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected updateLayers(options: PathOptions): void;\r\n    /**\r\n     * 实现 legend 配置项\r\n     */\r\n    getLegendOptions(): LegendOptions;\r\n}\r\n\r\nexport declare class PathLayer extends LinesLayer<PathLayerOptions> {\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<PathLayerOptions>;\r\n}\r\n\r\nexport declare type PathLayerOptions = Omit<LinesLayerOptions, 'shape'>;\r\n\r\n/** 路径图的配置类型定义 */\r\nexport declare interface PathOptions extends Omit<PlotOptions, 'label'>, PathLayerOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: SourceOptions;\r\n}\r\n\r\nexport declare abstract class Plot<O extends PlotOptions> extends Map_2<O> {\r\n    /**\r\n     * 默认的 options 配置项\r\n     */\r\n    static DefaultOptions: Partial<PlotOptions>;\r\n    /**\r\n     * 地图图表类型\r\n     */\r\n    static PlotType: typeof PlotType;\r\n    /**\r\n     * 图表类型名称\r\n     */\r\n    abstract readonly type: PlotType | string;\r\n    /**\r\n     * 数据\r\n     */\r\n    source: Source;\r\n    constructor(container: O);\r\n    constructor(container: string | HTMLDivElement, options: O);\r\n    /**\r\n     * 初始化图层\r\n     */\r\n    protected initLayers(): void;\r\n    /**\r\n     * 初始化图层事件\r\n     */\r\n    protected initLayersEvent(): void;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<PlotOptions>;\r\n    /**\r\n     * 创建 source 实例\r\n     */\r\n    protected createSource(): Source;\r\n    /**\r\n     * 创建图层\r\n     */\r\n    protected abstract createLayers(source: Source): LayerGroup;\r\n    /**\r\n     * 更新图层\r\n     */\r\n    protected abstract updateLayers(options: Partial<O>): void;\r\n    /**\r\n     * 创建数据标签图层\r\n     */\r\n    protected createLabelLayer(source: Source, label: LabelOptions, plotLayerConfig?: PlotLayerOptions): TextLayer;\r\n    /**\r\n     * 更新数据标签图层\r\n     */\r\n    protected updateLabelLayer(source: Source, label?: false | LabelOptions, plotLayerConfig?: PlotLayerOptions, labelLayer?: TextLayer): void;\r\n    /**\r\n     * 渲染\r\n     */\r\n    render(): void;\r\n    /**\r\n     * 图表图层加载成功\r\n     */\r\n    protected onLayersLoaded(): void;\r\n    /**\r\n     * 挂载到容器\r\n     * 用于高级图表 L7Plot 挂载单个图表示例\r\n     */\r\n    attachToScene(scene: Scene, theme?: Record<string, any>): void;\r\n    /**\r\n     * 取消挂载到容器上的 scene\r\n     * 用于高级图表 L7Plot 挂载单个图表示例\r\n     */\r\n    unattachFromScene(): void;\r\n    /**\r\n     * 添加到容器\r\n     * 用于 L7 Scene 与图表混合使用场景\r\n     */\r\n    addToScene(scene: Scene): void;\r\n    /**\r\n     * 从容器上移除\r\n     * 用于 L7 Scene 与图表混合使用场景\r\n     */\r\n    removeFromScene(): void;\r\n    /**\r\n     * 更新: 更新配置且重新渲染\r\n     */\r\n    update(options: Partial<O>): void;\r\n    /**\r\n     * 更新: 更新数据\r\n     */\r\n    changeData(data: any, cfg?: Omit<SourceOptions, 'data'>): void;\r\n}\r\n\r\n/**\r\n * plots 类型\r\n */\r\ndeclare type PlotConfigType = {\r\n    id?: string;\r\n} & (({\r\n    type: 'dot';\r\n} & OmitPlotOptions<DotOptions>) | ({\r\n    type: 'dotDensity';\r\n} & OmitPlotOptions<DotDensityOptions>) | ({\r\n    type: 'heatmap';\r\n} & OmitPlotOptions<HeatmapOptions>) | ({\r\n    type: 'grid';\r\n} & OmitPlotOptions<GridOptions>) | ({\r\n    type: 'hexbin';\r\n} & OmitPlotOptions<HexbinOptions>) | ({\r\n    type: 'path';\r\n} & OmitPlotOptions<PathOptions>) | ({\r\n    type: 'flow';\r\n} & OmitPlotOptions<FlowOptions>) | ({\r\n    type: 'area';\r\n} & OmitPlotOptions<AreaOptions>) | ({\r\n    type: 'choropleth';\r\n} & OmitPlotOptions<ChoroplethOptions>));\r\n\r\ndeclare abstract class PlotLayer<O extends PlotLayerOptions> extends EventEmitter implements IPlotLayer {\r\n    /**\r\n     * 地图图表类型\r\n     */\r\n    static LayerType: typeof LayerType;\r\n    /**\r\n     * 图层属性配置项 Keys\r\n     */\r\n    static LayerConfigkeys: string[];\r\n    /**\r\n     * layer 的 schema 配置\r\n     */\r\n    options: O;\r\n    /**\r\n     * layer 上一次的 schema 配置\r\n     */\r\n    lastOptions: O;\r\n    /**\r\n     * layer 实例\r\n     */\r\n    abstract readonly layer: ILayer;\r\n    /**\r\n     * layer 名称\r\n     */\r\n    abstract readonly name: string;\r\n    /**\r\n     * layer 类型\r\n     */\r\n    abstract readonly type: LayerType | string;\r\n    /**\r\n     * layer 是否具有交互效果，用于 tooltip\r\n     */\r\n    abstract readonly interaction: boolean;\r\n    constructor(options: O);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<O>;\r\n    pickLayerConfig<T extends PlotLayerOptions>(params: T): Partial<ILayerConfig>;\r\n    addTo(scene: Scene): void;\r\n    remove(scene: Scene): void;\r\n    /**\r\n     * 更新\r\n     */\r\n    update(options: Partial<O>): void;\r\n    /**\r\n     * 更新: 更新配置\r\n     */\r\n    updateOption(options: Partial<O>): void;\r\n    updateConfig(options: Partial<PlotLayerOptions>): void;\r\n    render(): void;\r\n    protected setSource(source: SourceOptions | Source): void;\r\n    changeData(source: SourceOptions | Source): void;\r\n    setIndex(zIndex: number): void;\r\n    setBlend(blend: LayerBlend): void;\r\n    setMinZoom(minZoom: number): void;\r\n    setMaxZoom(maxZoom: number): void;\r\n    show(): void;\r\n    hide(): void;\r\n    toggleVisible(): void;\r\n    isVisible(): boolean | undefined;\r\n    fitBounds(fitBoundsOptions?: unknown): void;\r\n    /**\r\n     * 事件代理: 绑定事件\r\n     */\r\n    on(name: string, callback: (...args: any[]) => void): this;\r\n    /**\r\n     * 事件代理: 绑定一次事件\r\n     */\r\n    once(name: string, callback: (...args: any[]) => void): this;\r\n    /**\r\n     * 事件代理: 解绑事件\r\n     */\r\n    off(name: string, callback: (...args: any[]) => void): this;\r\n}\r\n\r\n/**\r\n * 图表图层的基础配置\r\n */\r\nexport declare interface PlotLayerOptions {\r\n    name?: string;\r\n    zIndex?: number;\r\n    visible?: boolean;\r\n    minZoom?: number;\r\n    maxZoom?: number;\r\n    pickingBuffer?: number;\r\n    autoFit?: boolean;\r\n    blend?: LayerBlend;\r\n}\r\n\r\n/**\r\n * 基础 plot options 配置\r\n */\r\nexport declare interface PlotOptions extends MapOptions {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: SourceOptions;\r\n    /**\r\n     * 是否自动缩放到图层范围，默认为 false\r\n     */\r\n    autoFit?: boolean;\r\n    /**\r\n     * 数据标签配置\r\n     */\r\n    label?: false | LabelOptions;\r\n}\r\n\r\n/**\r\n * 地图图表类型\r\n */\r\nexport declare enum PlotType {\r\n    Dot = \"dot\",\r\n    DotDensity = \"dotDensity\",\r\n    Heatmap = \"heatmap\",\r\n    Grid = \"grid\",\r\n    Hexbin = \"hexbin\",\r\n    Path = \"path\",\r\n    Flow = \"flow\",\r\n    Area = \"area\",\r\n    Choropleth = \"choropleth\"\r\n}\r\n\r\n/**\r\n * 点图层基础配置\r\n */\r\nexport declare interface PointLayerConfig extends Partial<PlotLayerOptions> {\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: ShapeAttr<PointShape | string>;\r\n    /**\r\n     * 图形颜色\r\n     */\r\n    color?: ColorAttr;\r\n    /**\r\n     * 图形大小\r\n     */\r\n    size?: SizeAttr;\r\n    /**\r\n     * 图层样式\r\n     */\r\n    style?: PointLayerStyleOptions;\r\n    /**\r\n     * animation 配置\r\n     */\r\n    animate?: AnimateAttr;\r\n    /**\r\n     * 交互反馈\r\n     */\r\n    state?: StateAttribute;\r\n}\r\n\r\n/**\r\n * 点图层 图层样式\r\n */\r\nexport declare type PointLayerStyleOptions = {\r\n    opacity?: number;\r\n    strokeWidth?: number;\r\n    stroke?: string;\r\n};\r\n\r\nexport declare type PointShape = PointShape2d | PointShape3d;\r\n\r\n/**\r\n * 点图层 图形形状\r\n */\r\nexport declare type PointShape2d = 'circle' | 'square' | 'hexagon' | 'triangle' | 'pentagon' | 'octogon' | 'hexagram' | 'rhombus' | 'vesica' | 'dot';\r\n\r\nexport declare type PointShape3d = 'cylinder' | 'triangleColumn' | 'hexagonColumn' | 'squareColumn';\r\n\r\nexport declare type PointTextLayerStyleOptions = {\r\n    fill?: ColorAttr;\r\n    fontSize?: SizeAttr;\r\n    opacity?: number;\r\n    textAnchor?: AnchorType;\r\n    textOffset?: [number, number];\r\n    spacing?: number;\r\n    padding?: [number, number];\r\n    halo?: number;\r\n    gamma?: number;\r\n    stroke?: string;\r\n    strokeWidth?: number;\r\n    strokeOpacity?: number;\r\n    fontFamily?: string;\r\n    fontWeight?: string;\r\n    textAllowOverlap?: boolean;\r\n};\r\n\r\n/**\r\n * 面图层基础配置\r\n */\r\nexport declare interface PolygonLayerConfig extends Partial<PlotLayerOptions> {\r\n    /**\r\n     * 图形形状\r\n     */\r\n    shape?: PolygonShape;\r\n    /**\r\n     * 图形颜色\r\n     */\r\n    color?: ColorAttr;\r\n    /**\r\n     * 图形大小\r\n     */\r\n    size?: SizeAttr;\r\n    /**\r\n     * 图层样式\r\n     */\r\n    style?: PolygonLayerStyleOptions;\r\n    /**\r\n     * 交互反馈\r\n     */\r\n    state?: StateAttribute;\r\n}\r\n\r\n/**\r\n * 面图层 图层样式\r\n */\r\nexport declare type PolygonLayerStyleOptions = {\r\n    opacity?: number;\r\n};\r\n\r\n/**\r\n * 面图层 图形形状\r\n */\r\nexport declare type PolygonShape = 'fill' | 'line' | 'extrude';\r\n\r\nexport declare type PopupOptions = {\r\n    position: PositionType;\r\n};\r\n\r\nexport { PositionName }\r\n\r\nexport { PositionType }\r\n\r\nexport declare class PrismLayer extends PlotLayer<PrismLayerOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: {};\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 图层实例\r\n     */\r\n    layer: ILayer;\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    constructor(options: PrismLayerOptions);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<PrismLayerOptions>;\r\n    protected mappingLayer(layer: ILayer, options: PrismLayerOptions): void;\r\n    update(options: Partial<PrismLayerOptions>): void;\r\n    getColorLegendItems(): {\r\n        value: [number, number];\r\n        color: string;\r\n    }[];\r\n}\r\n\r\nexport declare interface PrismLayerOptions extends Omit<PolygonLayerConfig, 'shape'> {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: PrismLayerSourceOptions | Source;\r\n}\r\n\r\n/**\r\n * 数据配置\r\n */\r\ndeclare interface PrismLayerSourceOptions extends Pick<ISourceCFG, 'parser' | 'transforms'> {\r\n    data: any;\r\n}\r\n\r\nexport declare function registerFontFace(fontFamily: string, fontPath: string): void;\r\n\r\nexport declare function registerIconFont(name: string, fontUnicode: string): void;\r\n\r\nexport declare function registerIconFonts(iconFonts: {\r\n    name: string;\r\n    fontUnicode: string;\r\n}[]): void;\r\n\r\nexport declare function registerImage(id: string, image: IImage): void;\r\n\r\nexport declare function registerImages(images: {\r\n    id: string;\r\n    image: IImage;\r\n}[]): void;\r\n\r\n/**\r\n * 注册新的主题配置信息。\r\n */\r\nexport declare function registerTheme(theme: string, value: Record<string, any>, type?: 'light' | 'dark'): void;\r\n\r\n/** 旋转 */\r\nexport declare type RotateAttr = number | Callback<number> | RotateStyleAttribute;\r\n\r\nexport declare type RotateStyleAttribute = {\r\n    field?: string;\r\n    value?: number | number[] | Callback<number>;\r\n};\r\n\r\nexport declare type ScaleConfig = IScale;\r\n\r\nexport declare type ScaleConfigMap = IScaleOptions;\r\n\r\n/**\r\n * ScaleControl\r\n */\r\nexport declare type ScaleControlOptions = {\r\n    position?: PositionName;\r\n    maxWidth?: number;\r\n    metric?: boolean;\r\n    updateWhenIdle?: boolean;\r\n    imperial?: boolean;\r\n};\r\n\r\nexport { Scene }\r\n\r\n/** 图形形状 */\r\nexport declare type ShapeAttr<T> = T | Callback<T> | ShapeStyleAttribute<T>;\r\n\r\nexport declare type ShapeStyleAttribute<T> = {\r\n    field?: string | string[];\r\n    value?: T | T[] | Callback<T>;\r\n    scale?: ScaleConfig;\r\n};\r\n\r\n/** 大小 */\r\nexport declare type SizeAttr = number | number[] | Callback<number | number[]> | SizeStyleAttribute;\r\n\r\nexport declare type SizeStyleAttribute = {\r\n    field?: string;\r\n    value?: number | number[] | Callback<number | number[]>;\r\n    scale?: ScaleConfig;\r\n};\r\n\r\nexport { Source }\r\n\r\n/**\r\n * 数据配置\r\n */\r\nexport declare interface SourceOptions extends ISourceCFG {\r\n    data: any;\r\n    /**\r\n     * 网格聚合\r\n     */\r\n    aggregation?: GridAggregation;\r\n}\r\n\r\n/** 图形交互反馈 */\r\nexport declare type StateAttribute = {\r\n    active?: boolean | IActiveOption;\r\n    select?: boolean | IActiveOption;\r\n};\r\n\r\nexport declare type StatusOptions = IStatusOptions;\r\n\r\nexport declare type StyleAttribute<T> = {\r\n    field?: string | string[];\r\n    value?: T | T[] | Callback<T>;\r\n};\r\n\r\ndeclare type StyleSheet_2 = {\r\n    /** 底图样式 */\r\n    mapStyle?: string;\r\n    /** 主题色 */\r\n    brandColor?: string;\r\n    /** 辅助色 */\r\n    subColor?: string;\r\n    /** 分类色板 1，在数据量小于等于 10 时使用 */\r\n    paletteQualitative10?: string[];\r\n    /** 分类色板 2，在数据量大于 10 时使用 */\r\n    paletteQualitative20?: string[];\r\n    /** 语义色 */\r\n    paletteSemanticRed?: string;\r\n    /** 语义色 */\r\n    paletteSemanticGreen?: string;\r\n    /** 语义色 */\r\n    paletteSemanticYellow?: string;\r\n    /** (单色)顺序色板 */\r\n    paletteSequence?: string[];\r\n    /** 字体 */\r\n    fontFamily?: string;\r\n    /** 图例内容框背景色 */\r\n    legendContainerFillColor?: string;\r\n    /** 图例内容框阴影 */\r\n    legendContainerShadow?: string;\r\n    /** 图例内容框圆角 */\r\n    legendContainerBorderRadius?: number;\r\n    /** 图例颜色 */\r\n    legendTextFillColor?: string;\r\n    /** 图例文本字体大小 */\r\n    legendTextFontSize?: number;\r\n    /** 图例文本行高 */\r\n    legendTextLineHeight?: string;\r\n    /** tooltip 内容框背景色 */\r\n    tooltipContainerFillColor?: string;\r\n    /** tooltip 内容框阴影 */\r\n    tooltipContainerShadow?: string;\r\n    /** tooltip 内容框圆角 */\r\n    tooltipContainerBorderRadius?: number;\r\n    /** tooltip 文本颜色 */\r\n    tooltipTextFillColor?: string;\r\n    /** tooltip 数据项名称颜色 */\r\n    tooltipItemNameFillColor?: string;\r\n    /** tooltip 数据项数据颜色 */\r\n    tooltipItemValueFillColor?: string;\r\n    /** tooltip 文本字体大小 */\r\n    tooltipTextFontSize?: number;\r\n    /** tooltip 文本行高 */\r\n    tooltipTextLineHeight?: string;\r\n    /** label 文本颜色 */\r\n    labelFillColor?: string;\r\n    /** label 暗色文本颜色 */\r\n    labelFillColorDark?: string;\r\n    /** label 亮色文本颜色 */\r\n    labelFillColorLight?: string;\r\n    /** label 文本字体大小 */\r\n    labelFontSize?: number;\r\n    /** label 文本字体粗细 */\r\n    labelFontWeight?: number | string;\r\n    /** 点图的大小范围 */\r\n    pointSizeRange?: [number, number];\r\n    /** 点图填充颜色 */\r\n    pointFillColor?: string;\r\n    /** 点图填充颜色透明度 */\r\n    pointFillOpacity?: number;\r\n    /** 点图大小 */\r\n    pointSize?: number;\r\n    /** 点图描边粗细 */\r\n    pointBorder?: number;\r\n    /** 点图描边颜色 */\r\n    pointBorderColor?: string;\r\n    /** 点图 active 状态下填充颜色 */\r\n    pointActiveFillColor?: string;\r\n    /** 点图 selected 状态下填充颜色 */\r\n    pointSelectedFillColor?: string;\r\n};\r\nexport { StyleSheet_2 as StyleSheet }\r\n\r\n/** createTheme 主题样式表配置 */\r\nexport declare type StyleSheetCfg = Pick<StyleSheet_2, 'mapStyle' | 'subColor' | 'brandColor' | 'paletteQualitative10' | 'paletteQualitative20' | 'paletteSemanticRed' | 'paletteSemanticGreen' | 'paletteSemanticYellow' | 'paletteSequence' | 'fontFamily'>;\r\n\r\nexport declare class TextLayer extends PlotLayer<TextLayerOptions> {\r\n    /**\r\n     * 默认配置项\r\n     */\r\n    static DefaultOptions: {\r\n        style: {\r\n            fontSize: number;\r\n        };\r\n    };\r\n    /**\r\n     * 图层配置项 Keys\r\n     */\r\n    static LayerOptionsKeys: string[];\r\n    /**\r\n     * 图层名称\r\n     */\r\n    name: string;\r\n    /**\r\n     * 图层实例\r\n     */\r\n    layer: ILayer;\r\n    /**\r\n     * 图层类型\r\n     */\r\n    type: LayerType;\r\n    /**\r\n     * 图层是否具有交互属性\r\n     */\r\n    interaction: boolean;\r\n    constructor(options: TextLayerOptions);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    getDefaultOptions(): Partial<TextLayerOptions>;\r\n    protected mappingLayer(layer: ILayer, options: TextLayerOptions): void;\r\n    update(options: Partial<TextLayerConfig>): void;\r\n}\r\n\r\n/**\r\n * 文字图层基础配置\r\n */\r\nexport declare interface TextLayerConfig extends Partial<PlotLayerOptions & LabelOptions> {\r\n    color?: ColorAttr;\r\n    size?: SizeAttr;\r\n    state?: StateAttribute;\r\n}\r\n\r\nexport declare interface TextLayerOptions extends TextLayerConfig {\r\n    /**\r\n     * 具体的数据\r\n     */\r\n    source: SourceOptions | Source;\r\n}\r\n\r\n/** 纹理贴图 */\r\nexport declare type TextureAttr = string;\r\n\r\ndeclare class Tooltip extends EventEmitter {\r\n    /**\r\n     * 地图容器\r\n     */\r\n    protected scene: Scene;\r\n    /**\r\n     * 带交互的图层\r\n     */\r\n    protected interactionLayers: IPlotLayer[];\r\n    /**\r\n     * tooltip 的 schema 配置\r\n     */\r\n    protected options: TooltipOptions;\r\n    /**\r\n     * marker 实例\r\n     */\r\n    private marker;\r\n    /**\r\n     * tooltipComponent 实例\r\n     */\r\n    private tooltipComponent;\r\n    /**\r\n     * tooltip 是否可见\r\n     */\r\n    currentVisible: boolean;\r\n    /**\r\n     * TooltipComponent 更新项\r\n     */\r\n    private lastComponentOptions;\r\n    constructor(scene: Scene, interactionLayers: IPlotLayer[], options: TooltipOptions);\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<TooltipOptions>;\r\n    /**\r\n     * 更新 tooltip 组件\r\n     */\r\n    update(options: Partial<TooltipOptions>): void;\r\n    private initInteractionEvent;\r\n    private interactionTriggerHander;\r\n    private interactionUntriggerHander;\r\n    private unBindInteractionEvent;\r\n    private updateTooltip;\r\n    /**\r\n     * tooltip 添加到地图上\r\n     */\r\n    showTooltip(): void;\r\n    /**\r\n     * tooltip 从地图上移除\r\n     */\r\n    hideTooltip(): void;\r\n    /**\r\n     * 更新 tooltip 组件\r\n     */\r\n    private updateComponent;\r\n    /**\r\n     * 设置 tooltip 内容\r\n     */\r\n    private setComponent;\r\n    /**\r\n     * 设置 tooltip 位置\r\n     */\r\n    private setPostion;\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy(): void;\r\n}\r\n\r\nexport { TooltipAnchorType }\r\n\r\nexport declare interface TooltipEvent extends Event_2 {\r\n    data: {\r\n        title?: string;\r\n        items?: TooltipListItem[];\r\n    };\r\n    lngLat: ILngLat;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport declare type TooltipItem = {\r\n    field: string;\r\n    alias?: string;\r\n    customValue?: (value: any, properties: any, featureId: number) => any;\r\n};\r\n\r\nexport declare type TooltipOptions = {\r\n    title?: string;\r\n    customTitle?: (data: any) => string;\r\n    showTitle?: boolean;\r\n    showComponent?: boolean;\r\n    trigger?: 'mousemove' | 'click';\r\n    items?: string[] | TooltipItem[];\r\n    customItems?: (data: any) => TooltipListItem[];\r\n    className?: string;\r\n    anchor?: TooltipAnchorType;\r\n    offsets?: number[];\r\n    customContent?: TooltipCustomContent;\r\n    domStyles?: Record<string, any>;\r\n};\r\n\r\nexport declare function unregisterFontFace(fontFamily: string): boolean;\r\n\r\nexport declare function unregisterIconFont(name: any): boolean;\r\n\r\nexport declare function unregisterImage(id: string): boolean;\r\n\r\n/**\r\n * 地图更新配置\r\n */\r\nexport declare type UpdateMapConfig = Pick<MapConfig, 'center' | 'pitch' | 'rotation' | 'zoom' | 'style'>;\r\n\r\nexport declare type ValueOf<T> = T[keyof T];\r\n\r\nexport declare const version = \"0.0.5\";\r\n\r\n/**\r\n * 行政层级\r\n */\r\ndeclare type ViewLevel = {\r\n    /**\r\n     * 行政级别\r\n     */\r\n    level: 'world' | 'country' | 'province' | 'city' | 'district';\r\n    /**\r\n     * 显示行政代码/行政名称\r\n     */\r\n    adcode: number | string;\r\n    /**\r\n     * 化行政级别下的粒度\r\n     */\r\n    granularity?: 'country' | 'province' | 'city' | 'district';\r\n};\r\n\r\n/**\r\n * ZoomControl\r\n */\r\nexport declare type ZoomControlOptions = {\r\n    position?: PositionName;\r\n    zoomInText?: string;\r\n    zoomInTitle?: string;\r\n    zoomOutText?: string;\r\n    zoomOutTitle?: string;\r\n};\r\n\r\nexport { }\r\n\n        }"}}}}}